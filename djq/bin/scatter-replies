#!/usr/bin/env python2.7
# -*- mode: Python -*-
#
# (C) British Crown Copyright 2016, Met Office.
# See LICENSE.md in the top directory for license details.
#

# Read replies from djq and scatter them into files
#

from sys import stdin, stderr, argv
from signal import SIGINT
from os import _exit, EX_IOERR
from os import curdir, makedirs
from os.path import exists, isdir, normpath, join
from argparse import ArgumentParser
from json import load, dump
from djq.low import (verbosity_level, mutter, mumble, chatter,
                     debug_level, debug)
from djq.low import checks_minpri, checks_enabled
from djq.low import stringlike, arraylike

# This sets the default for -p and hence filenames
default_project = "cmip6"

class DirFail(Exception):
    pass

class BadJSON(Exception):
    pass

def ensure_directory(path):
    # Ensure path exists and is a directory.  Return path, or raise an
    # exception
    if isdir(path):
        return path
    elif exists(path):
        raise DirFail("{} exists but is not a directory".format(path))
    else:
        try:
            makedirs(normpath(path)) # makedirs doesn't like ..
            return path
        except:
            raise DirFail("failed to create {}".format(path))

def scatter_replies(input, directory, project):

    def emit_reply(reply):
        # emit a reply: return the filename if we manage, False if
        # something goes wrong that needs to be noted but which we can
        # continue from
        mip = reply['mip']
        experiment = reply['experiment']
        if not stringlike(mip):
            chatter("unstringlike MIP {}", mip)
            return False
        if not (stringlike(experiment)
                or experiment is True
                or experiment is False
                or experiment is None):
            chatter("mutant experiment {}", experiment)
            return False
        filename = join(directory,
                        "{}_{}_{}.json".format(project, mip.lower(),
                                               (experiment.lower()
                                                if stringlike(experiment)
                                                else ("ALL"
                                                      if experiment is True
                                                      else "NONE"))))
        mumble("{}/{} -> {}", mip, experiment, filename)
        # if we fail to write a file we just give up altogether
        with open(filename, 'w') as output:
            dump(reply, output, indent=1)
        return filename

    # Some hacky interning to try to save space.  With this hack it
    # will run in 4GB for all requests in 01.beta.32, without it it
    # won't.
    #

    interned = {}
    ic = [0, 0]

    def intern_maybe(o):
        ic[0] += 1
        if (ic[0] % 100000) == 0:
            debug("at {} interned {} missed {}", ic[0], len(interned), ic[1])
        if o is True or o is False or o is None:
            # All of these things overlap with 0 and 1.  Seriously,
            # Python people: would it have been so hard to design a
            # language which sucked just a bit less?  I guess too hard
            # for you, anyway, and who needs languges not full of ugly
            # surprises anyway?
            return o
        elif hasattr(o, '__hash__') and o.__hash__ is not None:
            if o in interned:
                return interned[o]
            else:
                interned[o] = o
                return o
        else:
            ic[1] += 1
            return o

    def intern_pairs_maybe(pairs):
        return {intern_maybe(k): intern_maybe(v)
                for (k, v) in pairs}

    replies = load(input, object_pairs_hook=intern_pairs_maybe)
    badnesses = 0
    emitted = 0
    if not arraylike(replies):
        raise BadJSON("didn't get a list of JSON replies")
    for reply in replies:
        if (isinstance(reply, dict)
            and 'mip' in reply
            and 'experiment' in reply):
            if emit_reply(reply):
                emitted += 1
            else:
                badnesses += 1
        else:
            chatter("ignoring a bogus reply")
            badnesses += 1
    mutter("scattered {} replies", emitted)
    debug("finally {} interned {} missed {}", ic[0], len(interned), ic[1])
    if badnesses > 0:
        raise BadJSON("{} bogus {}".format(badnesses,
                                           ("reply"
                                            if badnesses == 1
                                            else "replies")))

def main():
    parser = ArgumentParser(description="Scatter JSON DREQ replies into files")
    parser.add_argument("-v", "--verbose",
                        action='count', dest='verbosity',
                        help="increase verbosity (repeat for more noise)")
    parser.add_argument("-d", "--debug",
                        action='count', dest='debug',
                        help="debugging output (repeat for, perhaps, more)")
    parser.add_argument("-b", "--backtrace",
                        action='store_true', dest='backtrace',
                        help="don't suppress backtraces")
    parser.add_argument("-c", "--check-priority",
                        action='store', type=int,
                        dest='check_priority', default=0,
                        help="set the lowest check priority that will run")
    parser.add_argument("-o", "--output-directory",
                        default=curdir, dest='output_directory',
                        help="output directory: default is current directory")
    parser.add_argument("-p", "--project",
                        default=default_project, dest='project',
                        help="project, default is {}".format(default_project))
    parser.add_argument('replies', nargs='?', default=None,
                        help="file to read replies from: default is stdin")
    backtrace = None
    try:
        args = parser.parse_args()
        backtrace = args.backtrace
        debug_level(args.debug)
        verbosity_level(args.verbosity)
        checks_minpri(args.check_priority)
        debug("checks {} minpri {}", checks_enabled(), checks_minpri())
        mutter("scattering from {} to {}",
               (args.replies if args.replies is not None else "-"),
               args.output_directory)
        with (open(args.replies)
              if args.replies is not None
              else stdin) as input:
            scatter_replies(input, ensure_directory(args.output_directory),
                            args.project)
    except Exception as e:
        if not backtrace:
            exit(e)
        elif backtrace is None:
            print >>stderr, "{}: very early badness".format(argv[0])
            raise
        else:
            raise
    except KeyboardInterrupt as e:
        exit(128 + SIGINT)

    # Try and evade the 'lost stderr' spurions by just bottling out
    #
    try:
        if not stderr.closed:
            stderr.flush()
            stderr.close()
    except:
        if debug_level() < 2:
            _exit(EX_IOERR)
        else:
            raise

if __name__ == '__main__':
    main()
