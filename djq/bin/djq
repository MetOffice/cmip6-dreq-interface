#!/usr/bin/env python2.7
# -*- mode: Python -*-
#
# Top-level djq script
#
# This only handles the minimal things needed to wrap functionality
# from djq and handle exceptions which propagate to the top-level.
#

from sys import stdin, stdout, argv
from argparse import ArgumentParser
from djq import default_dqroot, valid_dqroot, default_dqtag
from djq import process
from djq.low import verbosity_level, debug_level
from djq.low import ExternalException, Scram

class BadRoot(ExternalException):
    def __init__(self, root):
        super(ExternalException, self).__init__(
            "{} doesn't look like a DREQ root".format(root))

def main():
    parser = ArgumentParser(description="DREQ JSON Query tool")
    parser.add_argument("-r", "--root",
                        default=None, dest='dqroot',
                        help="the top of a checked out CMIP6 DREQ")
    parser.add_argument("-t", "--tag",
                        default=None, dest='dqtag',
                        help="the default tag for the DREQ")
    parser.add_argument("-v", "--verbose",
                        action='count', dest='verbosity',
                        help="increase verbosity (repeat for more noise)")
    parser.add_argument("-d", "--debug",
                        action='count', dest='debug',
                        help="debugging output (repeat for, perhaps, more)")
    parser.add_argument("-b", "--backtrace",
                        action='store_true', dest='backtrace',
                        help="don't suppress backtraces")
    parser.add_argument('request', nargs='?', default=None,
                        help="JSON request (stdin default)")
    backtrace = None

    try:
        args = parser.parse_args()
        debugging = args.backtrace
        debug_level(args.debug)
        verbosity_level(args.verbosity)
        if args.dqroot is not None:
            default_dqroot(args.dqroot)
        # root can be checked, tag can't because it can be set in requests
        if not valid_dqroot():
            raise BadRoot(default_dqroot())
        if args.dqtag is not None:
            default_dqtag(args.dqtag)

        if args.request is not None:
            with open(args.request) as input:
                process(input, stdout, backtrace=backtrace)
        else:
            process(stdin, stdout, backtrace=backtrace)

    except Scram as e:
        raise
    except Exception as e:
        if not backtrace:
            exit(e)
        elif backtrace is None:
            print >>stderr, "{}: very early badness".format(argv[0])
            raise
        else:
            raise
    except KeyboardInterrupt as e:
        exit("interrupt")

if __name__ == '__main__':
    main()
