#!/usr/bin/env python2.7
# -*- mode: Python -*-
#
# (C) British Crown Copyright 2016-2018, Met Office.
# See LICENSE.md in the top directory for license details.
#

# Top-level djq script
#
# This only handles the minimal things needed to wrap functionality
# from djq and handle exceptions which propagate to the top-level.
#

from __future__ import print_function
from sys import stdin, stderr, stdout, argv
from signal import SIGINT
from os import _exit, EX_IOERR
from argparse import ArgumentParser
from importlib import import_module
from djq import process_stream
from djq.low import verbosity_level, mutter, debug_level, debug
from djq.low import Scram
from djq.low import checks_minpri, checks_enabled
from djq import __path__ as djq_path

def main():
    early = True                # nothing is sane until this is false
    parser = ArgumentParser(description="DREQ JSON Query tool")
    parser.add_argument("-r", "--root",
                        default=None, dest='dqroot',
                        help="the top of a checked out CMIP6 DREQ")
    parser.add_argument("-t", "--tag",
                        default=None, dest='dqtag',
                        help="the default tag for the DREQ")
    parser.add_argument("-u", "--use-trunk",
                        action='store_false', dest='dqtag',
                        help="use the DREQ trunk instead of a tag")
    parser.add_argument("-p", "--path-to-xml-directory",
                        default=None, dest='dqpath',
                        help="Directory containing the XML files")
    parser.add_argument("-i", "--implementation",
                        default=None, dest='implementation',
                        help="the name of an implementation to load")
    parser.add_argument("-j", "--jsonify-implementation",
                        default=None, dest='jsonify_implementation',
                        help="the name of a JSONify implementation to load")
    parser.add_argument("-f", "--feature-bundle",
                        default=None, dest='fbundle',
                        help="the name of a JSON feature bundle file")
    parser.add_argument("-v", "--verbose",
                        action='count', dest='verbosity',
                        help="increase verbosity (repeat for more noise)")
    parser.add_argument("-d", "--debug",
                        action='count', dest='debug',
                        help="debugging output (repeat for, perhaps, more)")
    parser.add_argument("-b", "--backtrace",
                        action='store_true', dest='backtrace',
                        help="don't suppress backtraces")
    parser.add_argument("-c", "--check-priority",
                        action='store', type=int,
                        dest='check_priority', default=0,
                        help="set the lowest check priority that will run")
    parser.add_argument("-o", "--output",
                        default=None, dest='output',
                        help="output file (stdout default)")
    parser.add_argument('request', nargs='?', default=None,
                        help="JSON request (stdin default)")
    try:
        # Some things need to be set up right away, but only set up
        # what we must set up.
        args = parser.parse_args()
        early = False
        debug_level(args.debug)            # must set this now
        verbosity_level(args.verbosity)    # also
        checks_minpri(args.check_priority) # no argument for this
        debug("djq from {}", djq_path[0])
        debug("checks {} minpri {}", checks_enabled(), checks_minpri())
        mutter("from {} to {}",
               (args.request if args.request is not None else "-"),
               (args.output if args.output is not None else "-"))
        with (open(args.request)
              if args.request is not None
              else stdin) as input, (open(args.output, 'w')
                                     if args.output is not None
                                     else stdout) as output:
            process_stream(input, output, backtrace=args.backtrace,
                           dqroot=args.dqroot,
                           dqtag=args.dqtag,
                           dqpath=args.dqpath,
                           dq=None,
                           dbg=args.debug,           # will rebind
                           verbosity=args.verbosity, # also
                           cvimpl=(import_module(args.implementation)
                                   if args.implementation is not None
                                   else None),
                           jsimpl=(import_module(args.jsonify_implementation)
                                   if args.jsonify_implementation is not None
                                   else None),
                           fbundle=args.fbundle)
    except Scram as e:
        raise
    except Exception as e:
        if early:
            # something has gone wrong before anything is set up
            print("{}: very early badness".format(argv[0]), file=stderr)
            raise
        elif args.backtrace:
            raise
        else:
            exit(e)
    except KeyboardInterrupt as e:
        exit(128 + SIGINT)

    # Try and evade the 'lost stderr' spurions by just bottling out
    #
    try:
        if not stdout.closed:
            stdout.flush()
            stdout.close()
        if not stderr.closed:
            stderr.flush()
            stderr.close()
    except:
        if debug_level() < 2:
            _exit(EX_IOERR)
        else:
            raise

if __name__ == '__main__':
    main()
