#!/usr/bin/env python2.7
# -*- mode: Python -*-
#
# Spit out a bunch of CSV files from the data request
#
# This is not general: it's just trying to reproduce the sheets from
# the spreadsheet Martin provides.
#

from sys import exit
from os import curdir, makedirs
from os.path import join, isdir
from argparse import ArgumentParser # 2.7
from csv import writer
from dreqPy.dreq import loadDreq, defaultDreqPath, defaultConfigPath
from dqi.util import walk_from_dqroot
from dqi.rulesets import spreadsheet
from dqi.pathdict import PathDict


# I think this is the order in the spreadsheet
# This should not be wired in here however
paths = ('defaultPriority',
         ('var', 'title'),
         ('var', 'units'),
         ('var', 'description'), # is this description & comments?
         ('var', 'label'),
         ('var', 'sn'),
         ('structure', 'cell_methods'),
         'positive',
         'type',
         # these three are merged into 'dimensions'
         ('structure', 'spatialShape', 'dimensions'),
         ('structure', 'temporalShape', 'dimensions'),
         ('structure', 'odims'),
         'label'                # of the CMORvar itself
         'modeling_realm',
         'frequency',
         ('structure', 'cell_measures'),
         'prov',
         'provNote',
         'rowIndex',
         'direct_mips',
         'all_mips')

def walk(outdir, dqroot=None, 
         varkey=lambda v: v['rowIndex'],
         tuplekey=min, varcmp=cmp):
    walked=walk_from_dqroot(dqroot, ruleset=spreadsheet)
    for table in walked.keys():
        with open(join(outdir, "{}.csv".format(table)), 'w') as out:
            w = writer(out)
            # each name in a mip table corresponds to a tuple of vars:
            # use varkey to find a key for each var in a tuple,
            # tuplekey to take an iterable of keys and pick one, and
            # varcmp as the comparison fn to sort.
            for varset in sorted((walked[table][var]
                                  for var in walked[table].keys()),
                                 cmp=varcmp,
                                 key=(lambda vs:
                                         tuplekey(varkey(v) for v in vs))):
                # Now make a PathDict for each element of the tuple
                # and grovel it, sorting each tuple
                for row in sorted((PathDict(v) for v in varset),
                                  cmp=varcmp, key=varkey):
                    w.writerow(tuple(sanitize(row[path])
                                     if path in row else "?"
                                     for path in paths))

def sanitize(thing):
    # I miss CLOS
    if isinstance(thing, tuple) or isinstance(thing, list):
        # this will horribly botch nested things, but these never
        # happen: the only case is lists of MIPs
        return ", ".join(sanitize(e) for e in thing)
    else:
        return thing

if __name__ == '__main__':
    parser = ArgumentParser(description="Create CSV files for each MIP table")
    parser.add_argument("outdir", nargs='?', default=curdir,
                        help="output directory, default %(default)s")
    parser.add_argument("-r", "--request-directory",
                        default=None, metavar="root", dest='root',
                        help="directory where the data request files live")
    parser.add_argument("-D", action='store_true', dest='debug',
                        help="debugging (don't suppress backtraces)")
    args = parser.parse_args()
    outdir = args.outdir
    try:
        if not isdir(outdir):
            # this will raise an exception if it exists and is a file:
            # that's fine
            makedirs(outdir)
        walk(outdir, args.root)
    except Exception as e:
        if not args.debug:
            exit(e)
        else:
            raise
 
