#!/usr/bin/env python2.7
# -*- mode: Python -*-
#
# (C) British Crown Copyright 2016, Met Office.
# See LICENSE.md in the top directory for license details.
#

# Just run the walker and dump some mildly pretty-printed text
#

from sys import stdout, exit
from argparse import ArgumentParser # 2.7
from dqi.util import walk_from_dqroot
from dqi.rulesets import original

def spaces(n, to):
    for i in range(n):
        to.write(" ")

def terpri(to):
    to.write("\n")

def every(predicate, iterable):
    # There must be a Python idiom for this?
    for it in iterable:
        if not predicate(it):
            return False
    return True

def dump(thing, to, depth=0, incr=2):
    if isinstance(thing, dict):
        if depth != 0:
            terpri(to)
        for k in sorted(thing.keys()):
            spaces(depth, to)
            to.write("{}: ".format(k))
            dump(thing[k], to, depth + incr, incr)
    elif isinstance(thing, list) or isinstance(thing, tuple):
        if every(lambda e: isinstance(e, str) or isinstance(e, unicode),
                 thing):
            to.write(", ".join(str(i) for i in thing))
            terpri(to)
        else:
            for (i, e) in enumerate(thing):
                terpri(to)
                spaces(depth, to)
                to.write("{}:".format(i))
                dump(e, to, depth + incr, incr)
    elif isinstance(thing, str) or isinstance(thing, unicode):
        to.write(thing)
        terpri(to)
    else:                       # could merge with previous case
        to.write(str(thing))
        terpri(to)

try:
    args = None
    parser = ArgumentParser(description="Dump a texty walk of the dreq")
    parser.add_argument("dqroot", nargs='?', default=None,
                        help="where the dreq lives, if given")
    parser.add_argument("-D", "--debug",
                        action='store_true', dest='debug',
                        help="don't suppress backtraces on errors")
    args = parser.parse_args()
    dump(walk_from_dqroot(args.dqroot, ruleset=original), stdout)
except Exception as e:
    if args is not None and not args.debug:
        exit(e)
    else:
        raise
